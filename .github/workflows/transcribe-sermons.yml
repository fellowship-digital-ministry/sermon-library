name: Transcribe and Embed Sermons

on:
  schedule:
    # Run every day at 7AM UTC
    - cron: '0 7 * * *'
  workflow_dispatch:  # Allows manual triggering

# Add permissions block
permissions:
  contents: write

jobs:
  transcribe:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Full history for commits
          token: ${{ secrets.PAT_TOKEN }}  # Use a Personal Access Token
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install FFmpeg
        run: sudo apt-get update && sudo apt-get install -y ffmpeg
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install required dependencies
          pip install pandas openai tqdm pydub pytube requests
          pip install pinecone
          pip install google-api-python-client
          pip install --upgrade yt-dlp
      
      - name: Configure Git
        run: |
          git config --global user.name "Sermon Transcription Bot"
          git config --global user.email "fellowship-digital-ministry@proton.me"
      
      # Add caching to save API responses and reduce quota usage
      - name: Cache API responses
        uses: actions/cache@v3
        with:
          path: transcription/.api_cache
          key: youtube-api-cache-${{ github.run_id }}
          restore-keys: youtube-api-cache-
      
      # Primary approach: YouTube API with retries
      - name: Run sermon monitoring with YouTube API (Attempt 1)
        id: api_attempt_1
        continue-on-error: true
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
        run: |
          mkdir -p transcription/data/audio
          cd transcription
          python monitor_channel.py --youtube-api --api-key "$YOUTUBE_API_KEY" --channel-id "UCek_LI7dZopFJEvwxDnovJg" --max 5 --process --cleanup
      
      # Retry with delay if first attempt failed
      - name: Wait and retry (Attempt 2)
        if: steps.api_attempt_1.outcome == 'failure'
        run: sleep 60
      
      - name: Run sermon monitoring with YouTube API (Attempt 2)
        id: api_attempt_2
        if: steps.api_attempt_1.outcome == 'failure'
        continue-on-error: true
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
        run: |
          cd transcription
          python monitor_channel.py --youtube-api --api-key "$YOUTUBE_API_KEY" --channel-id "UCek_LI7dZopFJEvwxDnovJg" --max 5 --process --cleanup
      
      # Final retry with longer delay
      - name: Wait and retry (Attempt 3)
        if: steps.api_attempt_1.outcome == 'failure' && steps.api_attempt_2.outcome == 'failure'
        run: sleep 120
      
      - name: Run sermon monitoring with YouTube API (Attempt 3)
        id: api_attempt_3
        if: steps.api_attempt_1.outcome == 'failure' && steps.api_attempt_2.outcome == 'failure'
        continue-on-error: true
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
        run: |
          cd transcription
          python monitor_channel.py --youtube-api --api-key "$YOUTUBE_API_KEY" --channel-id "UCek_LI7dZopFJEvwxDnovJg" --max 5 --process --cleanup
      
      # Fallback to direct method if all API attempts failed
      - name: Fallback to direct YouTube monitoring
        if: steps.api_attempt_1.outcome == 'failure' && steps.api_attempt_2.outcome == 'failure' && steps.api_attempt_3.outcome == 'failure'
        id: fallback_attempt
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          echo "API approach failed, trying fallback method with pytube"
          cd transcription
          python monitor_channel.py --channel "https://www.youtube.com/@chrismann9821" --max 5 --process --cleanup
      
      # Generate embeddings regardless of which method succeeded
      - name: Generate embeddings for new transcripts
        if: steps.api_attempt_1.outcome == 'success' || steps.api_attempt_2.outcome == 'success' || steps.api_attempt_3.outcome == 'success' || steps.fallback_attempt.outcome == 'success'
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}
          PINECONE_ENVIRONMENT: ${{ secrets.PINECONE_ENVIRONMENT || 'us-east-1' }}
          PINECONE_INDEX_NAME: ${{ secrets.PINECONE_INDEX_NAME || 'sermon-embeddings' }}
        run: |
          python tools/transcript_to_embeddings.py --skip_existing
      
      # Update metadata in Pinecone
      - name: Update Pinecone metadata from JSON files
        if: steps.api_attempt_1.outcome == 'success' || steps.api_attempt_2.outcome == 'success' || steps.api_attempt_3.outcome == 'success' || steps.fallback_attempt.outcome == 'success'
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}
          PINECONE_ENVIRONMENT: ${{ secrets.PINECONE_ENVIRONMENT || 'us-east-1' }}
          PINECONE_INDEX_NAME: ${{ secrets.PINECONE_INDEX_NAME || 'sermon-embeddings' }}
        run: |
          # Copy the metadata utilities to the tools directory
          cp api/metadata_utils.py tools/
          
          # Run the metadata update script for only recent changes
          python api/update_pinecone_metadata.py --only-recent --days=7
      
      # Commit and push changes
      - name: Pull latest changes
        if: steps.api_attempt_1.outcome == 'success' || steps.api_attempt_2.outcome == 'success' || steps.api_attempt_3.outcome == 'success' || steps.fallback_attempt.outcome == 'success'
        run: git pull origin main
        
      - name: Commit and push changes
        if: steps.api_attempt_1.outcome == 'success' || steps.api_attempt_2.outcome == 'success' || steps.api_attempt_3.outcome == 'success' || steps.fallback_attempt.outcome == 'success'
        run: |
          git add transcription/data/transcripts/
          git add transcription/data/metadata/
          git add transcription/data/video_list.csv
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Add new sermon transcripts and subtitles [skip ci]"
            git push
          fi